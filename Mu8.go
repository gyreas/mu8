package main

import (
	"fmt"
	"os"
)

var ibm_logo []uint8 = []uint8{
	0x00, 0xe0, 0xa2, 0x2a, 0x60, 0x0c, 0x61, 0x08, 0xd0, 0x1f, 0x70, 0x09,
	0xa2, 0x39, 0xd0, 0x1f, 0xa2, 0x48, 0x70, 0x08, 0xd0, 0x1f, 0x70, 0x04,
	0xa2, 0x57, 0xd0, 0x1f, 0x70, 0x08, 0xa2, 0x66, 0xd0, 0x1f, 0x70, 0x08,
	0xa2, 0x75, 0xd0, 0x1f, 0x12, 0x28, 0xff, 0x00, 0xff, 0x00, 0x3c, 0x00,
	0x3c, 0x00, 0x3c, 0x00, 0x3c, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff,
	0x00, 0x38, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x38, 0x00, 0xff, 0x00, 0xff,
	0x80, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0x00, 0x80, 0x00, 0xe0, 0x00,
	0xe0, 0x00, 0x80, 0xf8, 0x00, 0xfc, 0x00, 0x3e, 0x00, 0x3f, 0x00, 0x3b,
	0x00, 0x39, 0x00, 0xf8, 0x00, 0xf8, 0x03, 0x00, 0x07, 0x00, 0x0f, 0x00,
	0xbf, 0x00, 0xfb, 0x00, 0xf3, 0x00, 0xe3, 0x00, 0x43, 0xe0, 0x00, 0xe0,
	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xe0, 0x00, 0xe0,
}

type Mu8 struct {
	cpu Cpu

	romsz int
}

func (Mu8 *Mu8) load_rom(rom []uint8) {
	copy(Mu8.cpu.M[PROGRAM_ADDRESS_OFFSET:][:len(rom)], rom)
	Mu8.romsz = len(rom)
}

func main() {
	fmt.Println("Mu8! go!")

	Mu8 := Mu8{}
	Mu8.load_rom(ibm_logo)

	cpu := Mu8.cpu
	cpu.ip = PROGRAM_ADDRESS_OFFSET
	for cpu.ip < MEMORY_SIZE {
		inst := cpu.fetch()
		logmsg("%.4x | ", cpu.ip-2)
		cpu.decode_execute(&Mu8, inst)
	}
}

func logmsg(format string, args ...any) {
	fmt.Fprintf(os.Stderr, format, args...)
}
